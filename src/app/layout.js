'use client';
import localFont from 'next/font/local';
import { Provider } from 'react-redux';
import { store } from './store/store';
import { ToastContainer } from 'react-toastify';
import Footer from '@/components/LibaryComponent/FlowbiteComponent/Footer';
import Script from 'next/script';
import Navbar_ from '@/components/LibaryComponent/MaterialUi Compomnent/App-Bar';
import './globals.css';
import { GlobalProvider } from '@/context/globalprovider/globalProvider';
import { usePathname } from 'next/navigation';

const geistSans = localFont({
  src: './fonts/GeistVF.woff',
  variable: '--font-geist-sans',
  weight: '100 900',
});
const geistMono = localFont({
  src: './fonts/GeistMonoVF.woff',
  variable: '--font-geist-mono',
  weight: '100 900',
});

// export const metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// };

export default function RootLayout({ children }) {
  const pathName = usePathname();
  const isLoginPage = pathName === '/login';
  const isRegisterPage = pathName === '/register';
  const isForgetPage = pathName === '/verifyaccount';

  return (
    <html lang="en">
         <head>
          <link rel="manifest" href="/manifest.json" />
          <meta name="theme-color" content="#000000" />

      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
      <Script
  id="tawk-to"
  strategy="afterInteractive"
  dangerouslySetInnerHTML={{
    __html: `
      var Tawk_API=Tawk_API||{}, Tawk_LoadStart=new Date();
      (function(){
      var s1=document.createElement("script"),s0=document.getElementsByTagName("script")[0];
      s1.async=true;
      s1.src='https://embed.tawk.to/67f6a61c19e7691907e58ff9/1iodnho73';
      s1.charset='UTF-8';
      s1.setAttribute('crossorigin','*');
      s0.parentNode.insertBefore(s1,s0);
      })();
    `,
  }}
/>
        <Provider store={store}>
          <GlobalProvider>
            {!isLoginPage && !isRegisterPage && !isForgetPage && <Navbar_ />}
            {children}
            <ToastContainer autoClose={1000} />
            {!isLoginPage && !isRegisterPage && !isForgetPage && <Footer />}
          </GlobalProvider>
        </Provider>
      </body>
      </head>
    </html>
  );
}
