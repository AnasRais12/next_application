// import React, { useEffect, useState } from 'react'
// import { calculateTotalproduct_price } from '@/utils/CartCalculation';
// import { loadStripe } from '@stripe/stripe-js';
// import { getCart } from '@/utils/reduxGlobalStates/ReduxStates';
// import { supabase } from '@/lib/supabase';
// import { handleCardPayment,handleDelievery } from '@/helper/PaymentHelper';
// import useSession from '@/utils/UserExist/GetSession';
// import { useDispatch } from 'react-redux';
// import { RemoveAllFromCart } from '@/app/store/features/CartReducer/CartSlice';
// import { deleteAllCartItem } from '@/helper/cartHelpers';
// import UserQuery from '@/DbQuery/UserDetailQuery';
// import CSpinner from '@/components/CSpinner';
// import { useRouter } from 'next/navigation';
// import { FaCreditCard, FaTruck, FaWallet } from 'react-icons/fa6';
// import Swal from 'sweetalert2';

// function OrderSummary({ proceedToCheckout, heading }) {
//   const { userDetails } = UserQuery()
//   const dispatch = useDispatch()
//   const router = useRouter()
//   const cart = getCart()
//   const session = useSession()
//   const [paymentMethod, setPaymentMethod] = useState("card");
//   const [cardLoading, setcardLoading] = useState(false);
//   const [subTotal, setSubTotal] = useState(0);
//   const [deliveryLoading, setdeliveryLoading] = useState(false);

//   useEffect(() => {
//   setSubTotal(calculateTotalproduct_price(cart));
//   }, [cart]);
//   const Total = subTotal + 99

//   return (
//     <div className="mx-auto mt-6 flex-1 space-y-6  lg:mt-0 lg:w-[50%]">
//       <div className="space-y-4 rounded-lg border border-gray-200 bg-white p-4 shadow-lg  dark:border-gray-700 dark:bg-gray-800 sm:p-6">
//         <p className="text-xl font-semibold text-gray-900 dark:text-white">{heading}</p>

//         <div className="space-y-4 border-b-2 pb-2">

//           <div className="space-y-2">
//             <dl className="flex items-center justify-between gap-4">
//               <dt className="text-base font-normal text-gray-500 dark:text-gray-400">SubTotal</dt>
//               <dd className="text-base font-medium text-gray-900 dark:text-white">{subTotal.toFixed(2)}</dd>
//             </dl>

//             {/* <dl className="flex items-center justify-between gap-4">
//                         <dt className="text-base font-normal text-gray-500 dark:text-gray-400">Savings</dt>
//                         <dd className="text-base font-medium text-green-600">-$299.00</dd>
//                       </dl> */}
//             {paymentMethod === 'delivery' && (
//               <dl className="flex items-center justify-between gap-4">
//                 <dt className="text-base font-normal text-gray-500 dark:text-gray-400">Delivery</dt>
//                 <dd className="text-base font-medium text-gray-900 dark:text-white">$99</dd>
//               </dl>
//             )}

//             {/* <dl className="flex items-center justify-between gap-4">
//                         <dt className="text-base font-normal text-gray-500 dark:text-gray-400">Tax</dt>
//                         <dd className="text-base font-medium text-gray-900 dark:text-white">$799</dd>
//                       </dl> */}
//           </div>

//           <dl className="flex items-center justify-between gap-4 border-gray-200 pt-2 dark:border-gray-700">
//             <dt className="text-base font-bold text-gray-900 dark:text-white">Total</dt>
//             <dd className="text-base font-bold text-gray-900 dark:text-white">{Total.toFixed(2)}</dd>
//           </dl>
//         </div>

//         {heading !== 'Payment Detail' ?
//           <button
//             onClick={proceedToCheckout} className="flex w-full items-center justify-center rounded-lg px-5 py-2.5 text-sm font-medium text-white bg-unique focus:outline-none focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
//             Proceed to Checkout
//           </button>

//           :
//           (
//             <>
//               <div className="flex flex-col gap-3">
//                 {/* Radio Buttons */}
//                 <div className="flex flex-wrap gap-4">
//                   {/* Pay with Card */}
//                   <label className="flex items-center gap-2 cursor-pointer">
//                     <input
//                       type="radio"
//                       value="card"
//                       checked={paymentMethod === "card"}
//                       onChange={() => setPaymentMethod("card")}
//                     />
//                     <FaCreditCard className="h-5 w-5 text-orange-500 " />
//                     Pay with Card
//                   </label>

//                   {/* Choose Delivery */}
//                   <label className="flex items-center gap-2 cursor-pointer">
//                     <input
//                       type="radio"
//                       value="delivery"
//                       checked={paymentMethod === "delivery"}
//                       onChange={() => setPaymentMethod("delivery")}
//                     />
//                     <FaTruck className="h-5 w-5 text-orange-500" />
//                     Choose Delivery
//                   </label>
//                 </div>

//                 {/* Payment Buttons - Sirf Selected Button Show Hoga */}
//                 {paymentMethod === "card" && (
//                   <button onClick={() => handleCardPayment(
//                     supabase,
//                     session,
//                     cart,
//                     paymentMethod,
//                     userDetails,
//                     deleteAllCartItem,
//                     RemoveAllFromCart,
//                     dispatch,
//                     setcardLoading,
//                     Swal,
//                     loadStripe
//                   )} className="px-6 py-3 bg-orange-500 text-white rounded-lg shadow-md hover:bg-orange-600 transition duration-300">
//                     {cardLoading ? <CSpinner /> : 'Place Order '}
//                   </button>
//                 )}

//                 {paymentMethod === "delivery" && (
//                   <button onClick={()=> handleDelievery(
//                     supabase,
//                     session,
//                     cart,
//                     paymentMethod,
//                     userDetails,
//                     deleteAllCartItem,
//                     RemoveAllFromCart,
//                     dispatch,
//                     setdeliveryLoading,
//                     router,
//                     Swal

//                   )} className="px-6 py-3 bg-orange-500 text-white rounded-lg shadow-md hover:bg-orange-600 transition duration-300">
//                     {deliveryLoading ? <CSpinner /> : 'Place Order'}

//                   </button>
//                 )}


//               </div>
//             </>
//           )}
//         {heading !== 'Payment Detail' && (
//           <div className="flex items-center justify-center gap-2">
//             <span className="text-sm font-normal text-gray-500 dark:text-gray-400"> or </span>
//             <p onClick={() => router.push('/home')} className=" cursor-pointer inline-flex items-center gap-2 text-sm font-medium text-primary-700 underline hover:no-underline dark:text-primary-500">
//               Continue Shopping
//               <svg className="h-5 w-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
//                 <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 12H5m14 0-4 4m4-4-4-4" />
//               </svg>
//             </p>
//           </div>
//         )}

//       </div>

//       {/* <div className="space-y-4 rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800 sm:p-6">
//                   <htmlForm className="space-y-4">
//                     <div>
//                       <label htmlFor="voucher" className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"> Do you have a voucher or gift card? </label>
//                       <input type="text" id="voucher" className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-primary-500 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder:text-gray-400 dark:focus:border-primary-500 dark:focus:ring-primary-500" placeholder="" required />
//                     </div>
//                     <button type="submit" className="flex w-full items-center justify-center rounded-lg bg-primary-700 px-5 py-2.5 text-sm font-medium text-white hover:bg-primary-800 focus:outline-none focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">Apply Code</button>
//                   </htmlForm>
//                 </div> */}
//     </div>
//   )
// }

// export default OrderSummary





































import NextAuth from "next-auth";
import GithubProvider from "next-auth/providers/github";
import CredentialsProvider from "next-auth/providers/credentials";
import GoogleProvider from "next-auth/providers/google";
import axios from "axios";

const handle = NextAuth({
  providers: [
    GithubProvider({
      clientId: process.env.GITHUB_CLIENT,
      clientSecret: process.env.GITHUB_SECRET,
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT,
      clientSecret: process.env.GOOGLE_SECRET,
      authorization: {
        params: {
          scope: "openid profile email https://www.googleapis.com/auth/user.phonenumbers.read",
          access_type: "offline",
          prompt: "consent",
        },
      },
    }),
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        username: { label: "Username", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        try {
          const response = await axios.post("https://fakestoreapi.com/auth/login", {
            username: credentials.username,
            password: credentials.password,
          });
          if (response.data.token) {
            return {
              name: credentials.username,
              password: credentials.password,
              token: response.data.token,
            };
          } else {
            throw new Error("Invalid credentials");
          }
        } catch (error) {
          console.error("Error during authentication:", error);
          throw new Error("Invalid credentials");
        }
      },
    }),
  ],

  callbacks: {
    async jwt({ user, token, account, }) {
      if (account) {
        token.accesToken = account.access_token
        token.refreshToken = account.refresh_token;
        token.accessTokenExpires = Date.now() + (account.expires_at || 0) * 1000
      }
      if (user) {
        token.name = user.name;
        token.email = user.email;
        token.token = user.token;
        token.phoneNumber = user.phoneNumber;
      }
    return token

        
      // const refreshedToken = await GeneratedAccesToken(token.refresh_token)
      // console.log('Token HAS Expiryyyyyyyyyyyyyyyyyyyyyyyyyyy')
      // console.log('Token HAS Expiryyyyyyyyyyyyyyyyyyyyyyyyyyy')
      // console.log('Token HAS Expiryyyyyyyyyyyyyyyyyyyyyyyyyyy')
      // console.log('Token HAS Expiryyyyyyyyyyyyyyyyyyyyyyyyyyy')
      // return {
      //   ...token,
      //   accesToken: refreshedToken.accessToken,
      //   accessTokenExpires: refreshedToken.accesTokenExpires,
      //   refreshToken: refreshedToken.refreshToken
      // }

    },

    async session({ token, session }) {
      session.user = {
        name: token.name,
        email: token.email,
        token: token.token,
        phoneNumber: token.phoneNumber,


      };
      return session;
    },
  },

  secret: process.env.NEXTAUTH_SECRET,
});

export { handle as GET, handle as POST };












// TRACKING iD  ! 



import { useState, useEffect } from "react";
import dynamic from "next/dynamic";

const Map = dynamic(() => import("./Map"), { ssr: false });

const OrderTracking = ({ order }) => {
  const [status, setStatus] = useState(order.status);
  const [location, setLocation] = useState(order.location);

  useEffect(() => {
    // Simulating real-time order tracking update
    const interval = setInterval(() => {
      fetch(`/api/order/${order.id}`)
        .then((res) => res.json())
        .then((data) => {
          setStatus(data.status);
          setLocation(data.location);
        });
    }, 5000);

    return () => clearInterval(interval);
  }, [order.id]);

  const statusColors = {
    Pending: "text-yellow-600",
    Shipped: "text-blue-600",
    Delivered: "text-green-600",
    Cancelled: "text-red-600",
  };

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white shadow-md rounded-lg">
      <h2 className="text-xl font-bold">Order Tracking</h2>
      <p className={`mt-2 font-semibold ${statusColors[status]}`}>Status: {status}</p>

      {location && (
        <div className="mt-4 h-64 w-full">
          <Map location={location} />
        </div>
      )}
    </div>
  );
};

export default OrderTracking;


